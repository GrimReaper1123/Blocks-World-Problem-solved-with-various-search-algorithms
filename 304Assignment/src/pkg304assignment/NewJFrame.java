/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg304assignment;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Deque;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author Trishen
 */
public class NewJFrame extends javax.swing.JFrame {
 ArrayList<blockStack>blockList;
    ArrayList<blockStack>goal;
    String s,g;
    long startTime = 0;
    long endTime = 0;
    long totalTime = 0;
    
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        jButton2.setVisible(false);
        jButton3.setVisible(false);
        jButton4.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Check");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jButton2.setText("Depth-First Search");
        jButton2.setToolTipText("Perform a Depth-First Search");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jTextArea3.setRows(5);
        jScrollPane2.setViewportView(jTextArea3);

        jButton3.setText("Breadth-First Search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("A* Search");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Enter Goal State:");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Enter Initial State:");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Click to Begin");

        jButton5.setText("Help");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton5))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(10, 10, 10)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jLabel3))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
blockList = new ArrayList<blockStack>();
goal = new ArrayList<>();
jTextArea2.setText("");

 s = jTextArea1.getText();
 g  = jTextArea3.getText();
 
String charC = s.trim();
 
 charC = charC.replaceAll("\n", "");
 charC = charC.replaceAll(" ", "");
 String charB = g.trim();

 charB = charB.replaceAll("\n", "");
 charB = charB.replaceAll(" ", "");
 if(checkChars(charC, charB)){
     populateBlockList();
     populateGoal();
 jTextArea2.append("Start State : ");
jTextArea2.append(blockList.toString()+"\n");
jTextArea2.append("Goal State : "+goal.toString());
 jButton2.setVisible(true);
   jButton3.setVisible(true);
   jButton4.setVisible(true);
 }
 else{
     JOptionPane.showMessageDialog(null, "Input String and Goal String Have Different Characters", "Error!", JOptionPane.ERROR_MESSAGE);
     jButton2.setVisible(false);
   jButton3.setVisible(false);
   jButton4.setVisible(false);
 }
//System.out.println("exited");






//jTextArea2.append(s);// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        
        jTextArea2.setText("");
        for (int i = 0; i < blockList.size(); i++) {
            jTextArea2.append(blockList.get(i)+"\n");
        }
        
        jTextArea2.append(dfs(blockList,goal));
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTextArea2.setText("");
        for (int i = 0; i < blockList.size(); i++) {
            jTextArea2.append(blockList.get(i)+"\n");
        }
        
        jTextArea2.append(bfs(blockList,goal)); // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       jTextArea2.setText("");
        for (int i = 0; i < blockList.size(); i++) {
            jTextArea2.append(blockList.get(i)+"\n");
        }
       state newState = new state(blockList);
        
        jTextArea2.append(ASearch(newState,goal));  // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
JOptionPane.showMessageDialog(null, "Intial state eg:\nop\ncturem\nThe goal state must be entered in vertical (stack)format eg:\nc\no\nm\np\nu\nt\ne\nr\nLeading  space characters count as the table but must be within the total number of blocks. eg,\n   a\n   p\n   p\n   l\n   l\n_e ,where _ indicates a space\nInitial string and goal string must have the same characters", "Help", JOptionPane.INFORMATION_MESSAGE);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
      public class blockStack{
        ArrayList<String>blocks = new ArrayList<String>();
        int num;
        //int f,g,h=0;
        public blockStack(String[]b, int num){
            for (int i = 0; i < b.length; i++) {
                blocks.add(b[i]);
            }
            this.num = num;
        }
        public blockStack(blockStack b){
            this.num = b.num;
            for (int i = 0; i < b.blocks.size(); i++) {
                blocks.add(b.blocks.get(i));
            }
        }
        public blockStack(int num){
            System.out.println("made blockstack "+num);
            this.num=num;
        }
        public void addBlock(String b){
            blocks.add(b);
        }
        public boolean hasNoTopBlock(){
            return(blocks.size()==1);
             
        }
        public boolean isEmptyStack(){
            return blocks.isEmpty();
        }
        
        public String getTopBlock(){
            if(blocks.size()>0){
                String el = blocks.get(blocks.size()-1);
                blocks.remove(blocks.size()-1);
                return el;
            }
            else{
                return null;
            }
        }
        public String toString(){
            String s = "Stack "+num+" |";
            for (int i = 0; i < blocks.size(); i++) {
                s=s.concat(blocks.get(i)+" ");
            }
            return s;
        }


    }

      public String fillString(String s,int size ){
        //System.out.println((s.length()==size) );
          String temp = s;
          if(!(temp.length()== size)){
              for (int i = 0; i < ((size - s.length())); i++) {
                  temp+=" ";
              }
          }
        //  System.out.println(s);
          return temp;
      }
     public class state{
         ArrayList<blockStack>currentState;
         int f,g,h;
         public state( ArrayList<blockStack>currentState){
             this.currentState = currentState;
         }
     }
      public String ASearch(state startState, ArrayList<blockStack> goalState){
          startTime=System.currentTimeMillis();
           Deque<state>open = new LinkedList <state> ();
       open.addFirst(startState);
       ArrayList<state>closed = new ArrayList<>();
       String state= "failure";
       int depthCount = -1;
       while(!open.isEmpty() || !state.equals("success")){
           depthCount++;
           state x = open.pollFirst();
           
           if(checkGoal(x.currentState, goalState)){
               state = "success";
                for (int i = 0; i < closed.size(); i++) {
                   jTextArea2.append("\n"+closed.get(i).currentState);
               }
               break;
           }
           else{
                ArrayList<ArrayList<blockStack>>children = generateChildren(x.currentState);
                List list = (LinkedList)open;
               // System.out.println(open.size());
              
               if(open.size()>0 &&children.size()>0){
                   for (int i = 0; i < open.size(); i++) {
                       for (int j = 0; j < children.size(); j++) {
                         if  (list.get(i).toString().equals(children.get(j).toString())){
                             children.remove(j);
                       }
                   }
               
               }
                   
                   
                 if(closed.size()>0 && children.size()>0){
                   for (int i = 0; i < closed.size(); i++) {
                       for (int j = 0; j < children.size(); j++) {
                         if  (closed.get(i).toString().equals(children.get(j).toString())){
                             children.remove(j);
                       }
                   }
               
               }
                   
               for (int i = 0; i < children.size(); i++) {
                   state child = new state(children.get(i));
                   child.h = calculateHeuristic(children.get(i), goalState);
                   child.g = depthCount;
                   child.f = child.h + child.g;
                    System.out.println(child.currentState+" heuristic: "+child.h);
                   open.add(child);
                  // if(!(list.get(i).children.get(i)) || closed.contains(children.get(i)))){
                     
                   }
               }
           }
               else{
                   for (int i = 0; i < children.size(); i++) {
                       state child = new state(children.get(i));
                   child.h = calculateHeuristic(children.get(i), goalState);
                   child.g = depthCount;
                   child.f = child.h + child.g;
                   System.out.println(child.currentState+" heuristic: "+child.h);
                       open.add(child);
                   }
               }
           }
           closed.add(x);
           Map<state,Integer> map = new HashMap<>();
           for (state object : open) {
               map.put(object, object.f);
           }
           map = sortByValue(map);
           open = new LinkedList<>();
           for (state key:map.keySet()) {
               open.add(key);
           }
           
           
       }
         endTime = System.currentTimeMillis();
       totalTime = (endTime-startTime);
       System.out.println("A* time:"+totalTime);
       return state;
          
      }
      
   
 private static Map<state, Integer> sortByValue(Map<state, Integer> unsortMap) {

     
        List<Map.Entry<state, Integer>> list =
                new LinkedList<Map.Entry<state, Integer>>(unsortMap.entrySet());

        Collections.sort(list, new Comparator<Map.Entry<state, Integer>>() {
            public int compare(Map.Entry<state, Integer> o1,
                               Map.Entry<state, Integer> o2) {
                return (o1.getValue()).compareTo(o2.getValue());
            }
        });

       
        Map<state, Integer> sortedMap = new LinkedHashMap<state, Integer>();
        for (Map.Entry<state, Integer> entry : list) {
            sortedMap.put(entry.getKey(), entry.getValue());
        }

     


        return sortedMap;
    }
 public int calculateHeuristic(ArrayList<blockStack>state,ArrayList<blockStack>goal){
         // int outOfPlace  =0;
          
          
          ArrayList<String> goalStack = new ArrayList<>();
          int count = 0, hSum = 0;
          for (int i = 0; i < goal.size(); i++) {
              if(goal.get(i).blocks.size()>0){
                   goalStack  = goal.get(i).blocks;
                   count = i;
                  
              }
              
          }
          
          
          
          for (int i = 0; i < state.size(); i++) {
              for (int j = 0; j < state.get(i).blocks.size(); j++) {
                  for (int k = 0; k < goalStack.size(); k++) {
                      if(state.get(i).blocks.get(j).equals(goalStack.get(k))){
                          if(j!=k){
                              int c = Math.abs(j-k);
                              hSum+=c;
                          }
                          if(state.get(i).num!=count){
                              int c = Math.abs(state.get(i).num-count);
                              hSum+=c;
                          }
                          //hSum+=Math.abs((count-i)+(goalStack.size()-j)+(j-k));
                      }
                  }
                  
              }
 
          }
          return hSum;
          
          
          
      }
 public String bfs(ArrayList<blockStack>startState, ArrayList<blockStack> goalState){
     startTime=System.currentTimeMillis();
          Deque<ArrayList<blockStack>>open = new LinkedList <ArrayList<blockStack>> ();
       open.addFirst(startState);
       ArrayList<ArrayList<blockStack>>closed = new ArrayList<>();
       String state= "failure";
       while(!open.isEmpty() || !state.equals("success")){
            ArrayList<blockStack>x = open.pollFirst();
           
           if(checkGoal(x, goalState)){
               state = "success";
                 for (int i = 0; i < closed.size(); i++) {
                   jTextArea2.append("\n"+closed.get(i));
               }
               break;
           }
           else{
               ArrayList<ArrayList<blockStack>>children = generateChildren(x);
                // System.out.println(children.size());
                  
               closed.add(x);
               List list = (LinkedList)open;
               // System.out.println(open.size());
              
               if(open.size()>0 &&children.size()>0){
                   for (int i = 0; i < open.size(); i++) {
                       for (int j = 0; j < children.size(); j++) {
                         if  (list.get(i).toString().equals(children.get(j).toString())){
                             children.remove(j);
                       }
                   }
               
               }
                   
                   
                 if(closed.size()>0 && children.size()>0){
                   for (int i = 0; i < closed.size(); i++) {
                       for (int j = 0; j < children.size(); j++) {
                         if  (closed.get(i).toString().equals(children.get(j).toString())){
                             children.remove(j);
                       }
                   }
               
               }
                   
               for (int i = 0; i < children.size(); i++) {
                   open.addLast(children.get(i));
                  // if(!(list.get(i).children.get(i)) || closed.contains(children.get(i)))){
                     
                   }
               }
           }
               else{
                   for (int i = 0; i < children.size(); i++) {
                       open.addLast(children.get(i));
                   }
               }
           }
       }
       endTime = System.currentTimeMillis();
       totalTime = endTime-startTime;
       
       System.out.println("bfs time:"+totalTime);
       return state;
      }
      public String dfs(ArrayList<blockStack> startState, ArrayList<blockStack> goalState){
           startTime=System.currentTimeMillis();
       Deque<ArrayList<blockStack>>open = new LinkedList <ArrayList<blockStack>> ();
       open.addFirst(startState);
       ArrayList<ArrayList<blockStack>>closed = new ArrayList<>();
       String state= "failure";
       while(!open.isEmpty() || !state.equals("success")){
           ArrayList<blockStack>x = open.pollFirst();
           
           if(checkGoal(x, goalState)){
               state = "success";
               for (int i = 0; i < closed.size(); i++) {
                   jTextArea2.append("\n"+closed.get(i));
               }
               break;
               
           }
           else{
              // System.out.println("gen children");
             
               ArrayList<ArrayList<blockStack>>children = generateChildren(x);
                // System.out.println(children.size());
                  
               closed.add(x);
               List list = (LinkedList)open;
               // System.out.println(open.size());
              
               if(open.size()>0 &&children.size()>0){
                   for (int i = 0; i < open.size(); i++) {
                       for (int j = 0; j < children.size(); j++) {
                         if  (list.get(i).toString().equals(children.get(j).toString())){
                             children.remove(j);
                       }
                   }
               
               }
                   
                   
                 if(closed.size()>0 && children.size()>0){
                   for (int i = 0; i < closed.size(); i++) {
                       for (int j = 0; j < children.size(); j++) {
                         if  (closed.get(i).toString().equals(children.get(j).toString())){
                             children.remove(j);
                       }
                   }
               
               }
                   
               for (int i = 0; i < children.size(); i++) {
                   open.addFirst(children.get(i));
                  // if(!(list.get(i).children.get(i)) || closed.contains(children.get(i)))){
                     
                   }
               }
           }
               else{
                   for (int i = 0; i < children.size(); i++) {
                       open.addFirst(children.get(i));
                   }
               }
           }
          
      }
          endTime = System.currentTimeMillis();
       totalTime = endTime-startTime;
      
       System.out.println("dfs time:"+totalTime);
          return state;   
      }
    
      public boolean checkGoal(ArrayList<blockStack>state,ArrayList<blockStack>goal){
         // System.out.println("checking goal");
          System.out.println(state+ "goal: "+goal);
          if(state.toString().equals(goal.toString())){
              System.out.println("Achieved");
              return true;
          }
          else{
                  return false;
          }
         
          
              
      
      }
      
      public ArrayList<ArrayList<blockStack>>generateChildren(ArrayList<blockStack> parent){
         ArrayList<ArrayList<blockStack>>children= new ArrayList<>();
        //ArrayList<blockStack>child = parent;
        // System.out.println(parent.toString());
          for (int i = 0; i < parent.size(); i++) {
              ArrayList<blockStack>temp = new ArrayList<>();
              temp = copyArrayList(parent, temp);
             //System.out.println("init parent:"+parent.toString());
            // System.out.println("init temp:"+temp);
             // System.out.println("Iter "+i);
              if(!parent.get(i).isEmptyStack()){
                  String  holder = temp.get(i).getTopBlock();
                  ArrayList<blockStack>t = new ArrayList<>();
                         t= copyArrayList(temp, t);
                 // System.out.println("t: "+t);
                  
                  for (int j = 0; j < parent.size(); j++) {
                      //System.out.println(parent.size());
                    if(j!=i){
                           temp.get(j).addBlock(holder);
                          System.out.println("child:"+temp.toString());
                          children.add(temp);
                           temp = copyArrayList(t, temp);
                      }
                     // temp = copyArrayList(parent, temp);
                     
                      
                  }
                  
              }
          }
          System.out.println("done generating children");
          return children;
      }
      
      public boolean populateBlockList(){
          //jTextArea2.append(jTextArea1.getLineCount()+"\n");
if(jTextArea1.getLineCount()>1){
    String[]lines = s.split("\n");
 /*for (int i = 0; i < lines.length; i++) {
            jTextArea2.append(lines[i]+",");
        }*/
 String base  = lines[jTextArea1.getLineCount()-1];
 String charD = s.trim();
 charD = charD.replaceAll(" ", "");
 charD = charD.replaceAll("\n", "");
 System.out.println(charD.length());
 
       for (int i = 0; i < charD.length(); i++) {
            blockList.add(new blockStack(i));
        }
        System.out.println(base.length());
        int v = lines.length;
        for (int i = v-1; i > -1 ; i--) {
           System.out.println(i);

        System.out.println(lines[i]);
            String temp = fillString(lines[i], base.length());

            //lines[i]=temp;
        char []l = temp.toCharArray();
           System.out.println(temp);
          

            for (int j = 0; j < base.length(); j++) {
              System.out.println(l[j]+":"+j);
                if(!(l[j]==(' ')||l[j]==('\n'))){
                    blockList.get(j).addBlock(""+l[j]);
                }
            }
    }

}
else{
    char[] base  = s.toCharArray();
    for (int i = 0; i < base.length; i++) {
        System.out.println(base[i]+":"+i);
    }
    
        for (int i = 0; i <base.length; i++) {
            blockList.add(new blockStack(i));
        }
        for (int i = 0; i < base.length; i++) {
            if(base[i]!=(' ')){
           blockList.get(i).addBlock(""+base[i]);
            
        }
           // jTextArea2.append(base[i]+" ");
        }

}
return true;
      }
      
     public boolean populateGoal(){
          if(jTextArea3.getLineCount()>1){
    String[]lines = g.split("\n");
 //for (int i = 0; i < lines.length; i++) {
      //      jTextArea2.append(lines[i]+",");
      //  }
 String base  = lines[jTextArea3.getLineCount()-1];
 String charD = g.trim();
 charD = charD.replaceAll(" ", "");
 charD = charD.replaceAll("\n", "");
 System.out.println(charD.length());
 
       for (int i = 0; i < charD.length(); i++) {
            goal.add(new blockStack(i));
        }
        System.out.println(base.length());
        int v = lines.length;
        for (int i = v-1; i > -1 ; i--) {
           System.out.println(i);

        System.out.println(lines[i]);
            String temp = fillString(lines[i], base.length());

            //lines[i]=temp;
        char []l = temp.toCharArray();
           System.out.println(temp);
          

            for (int j = 0; j < base.length(); j++) {
              System.out.println(l[j]+":"+j);
                if(!(l[j]==(' ')||l[j]==('\n'))){
                    goal.get(j).addBlock(""+l[j]);
                }
            }
    }

}
else{
    char[] base  = g.toCharArray();
    for (int i = 0; i < base.length; i++) {
        System.out.println(base[i]+":"+i);
    }
    
        for (int i = 0; i <base.length; i++) {
            goal.add(new blockStack(i));
        }
        for (int i = 0; i < base.length; i++) {
            if(base[i]!=(' ')){
           goal.get(i).addBlock(""+base[i]);
            
        }
            //jTextArea2.append(base[i]+" ");
        }

}
return true;
      }
    public ArrayList<blockStack>copyArrayList(ArrayList<blockStack>srce,ArrayList<blockStack>dest){
        ArrayList<blockStack> t = new ArrayList<>();
        for (int i = 0; i < srce.size(); i++) {
            blockStack holder = new blockStack(srce.get(i));
            t.add(holder);
        }
        return t;
    } 
    
     public  boolean checkChars(String string1, String string2)
     {
         boolean isContained = false;
         char[] char1 = string1.toCharArray();
         char[] char2 = string2.toCharArray();
         for(int i = 0; i < char1.length; i++)
         {
             isContained = false;
             for(int j = 0; j < char2.length; j++)
             {
                 if(char1[i] == char2[j])
                 {
                     isContained = true;
                     break;
                 }
             }
             if(isContained == false)
             {
                 break;
             }
         }
         if(isContained == true)
         {
             for(int i = 0; i < char2.length; i++)
             {
                 isContained = false;
                 for(int j = 0; j < char1.length; j++)
                 {
                     if(char2[i] == char1[j])
                     {
                         isContained = true;
                         break;
                     }
                 }
                 if(isContained == false)
                 {
                     break;
                 }
             }
         }
         if(isContained)
         {
            return true;
         }
         else
         {
            return false;
         }
     }
    
    public static void main(String args[]) {



        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });



    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    // End of variables declaration//GEN-END:variables
}
